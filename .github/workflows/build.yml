############################################################
# Root workflow for building
############################################################
name: Build

run-name: Build ${{github.run_id}}

on: [push, workflow_dispatch]

jobs:
  # Create install media
  create-install-media:
    runs-on: windows-2022
    timeout-minutes: 60
    steps:
      # Check out
      - name: Checkout
        uses: actions/checkout@v4

      # Determine cache keys
      - name: Get cache keys
        id: get-cache-keys
        shell: pwsh
        run: |
          ## Get cache key for downloads cache
          $hash = ./install-media/get_downloads_hash.ps1 ./install-media/downloads.csv
          echo "downloads-cache-key=$hash" >> $env:GITHUB_OUTPUT

      # Get cached install files
      - name: Get cached install files
        id: get-cached-files
        uses: actions/cache/restore@v3
        with:
          key: install-media-downloads
          path: ./install-media/download
          lookup-only: true

      # Get install files
      - name: Get install files
        id: get-install-files
        shell: pwsh
        run: |
          ./install-media/create_install_media.ps1 -DownloadOnly
          if ($LASTEXITCODE -eq 10) {
            echo 'New files were downloaded => cache needs to be updated'
            echo 'download-occurred=true' >> $env:GITHUB_OUTPUT
            exit 0
          }

      # Save install files to cache if updated
      - name: Save install files to cache if updated
        if: steps.get-install-files.outputs.download-occurred == 'true'
        uses: actions/cache/save@v3
        with:
          key: install-media-downloads
          path: ./install-media/download

      # Install Windows ADK deployment tools
      #- name: Install Windows ADK deployment tools
      #  shell: pwsh
      #  run: |
      #    ./build/github_build_helper.ps1 -InstallAdkDeploymentTools
      #    if ($LASTEXITCODE) { exit $LASTEXITCODE }
      #    echo "Adding Oscdimg dir to PATH:"
      #    echo "${env:ProgramFiles(x86)}\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\amd64\Oscdimg" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      # Generate custom install image
      #- name: Generate custom install image
      #  shell: pwsh
      #  run: ./install-media/create_install_media.ps1 -SkipDownload

      # Upload custom install image artifact


  # Build and test Vagrant box
  build-and-test:
    # Run after cache-install-media
    needs: create-install-media

    # Build using different virtualization providers
    strategy:
      fail-fast: false
      matrix:
        include:
          - virt-provider-name: virtualbox
            virt-provider-id: vbx
          - virt-provider-name: vmware
            virt-provider-id: vmw

    # Reference reusable workflow to do the actual building and testing
    uses: ./.github/workflows/sub-build-and-test.yml

    # Inherit secrets
    secrets: inherit

    # Pass parameters to the sub-workflow
    with:
      # Virtualization provider name
      virt-provider-name: ${{matrix.virt-provider-name}}
      # Virtualization provider ID
      virt-provider-id: ${{matrix.virt-provider-id}}


  # Rerun failed jobs
  #rerun-failed-jobs:
  #  runs-on: ubuntu-latest
  #  needs: build-and-test
  #  if: failure()
  #  steps:
  #    # Check out
  #    - name: Checkout
  #      uses: actions/checkout@v4

  #    # Rerun failed jobs
  #    - name: Rerun failed jobs in the current workflow
  #      env:
  #        GH_TOKEN: ${{ github.token }}
  #      run: gh run rerun ${{ github.run_id }} --failed